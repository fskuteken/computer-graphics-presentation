<h1>Exemplo completo</h1>

<pre>
  <code class="glsl">
  attribute vec3 position;

  void main() {
    gl_Position = vec4(position, 1.0);
  }
  </code>
</pre>

<pre>
  <code class="glsl">
  precision mediump float;

  uniform vec4 color;

  void main() {
    gl_FragColor = color;
  }
  </code>
</pre>

<pre>
  <code class="javascript">
  const canvas = document.getElementById('canvas')
  const gl = canvas.getContext('webgl')

  const vertexShaderSource = document.getElementById('vertex-shader').text
  const fragmentShaderSource = document.getElementById('fragment-shader').text


  // Creating the program
  const program = gl.createProgram()
  const vertexShader = gl.createShader(gl.VERTEX_SHADER)
  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)

  gl.shaderSource(vertexShader, vertexShaderSource)
  gl.shaderSource(fragmentShader, fragmentShaderSource)
  gl.compileShader(vertexShader)
  gl.compileShader(fragmentShader)
  gl.attachShader(program, vertexShader)
  gl.attachShader(program, fragmentShader)
  gl.linkProgram(program)
  gl.useProgram(program)


  // Setting the attribute
  const positionLocation = gl.getAttribLocation(program, 'position')

  const buffer = gl.createBuffer()
  const vertices = new Float32Array([
    -1, -1, 0,
    1, -1, 0,
    0, 1, 0,
  ])
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW)
  gl.enableVertexAttribArray(positionLocation)
  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, gl.FALSE, 12, 0)

  // Settings the uniform
  const colorLocation = gl.getUniformLocation(program, 'color')

  gl.uniform4f(colorLocation, 0, 0, 1, 1)


  // Rendering
  gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 3)
  </code>
</pre>
