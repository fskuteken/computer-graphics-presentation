<div class="flex-container">
  <h1>Vertices</h1>
  <p>Vertices represents points in space:</p>
  <div class="flex-item">
    <canvas id="canvas" class="fill"></canvas>
  </div>
</div>

<script id="vertex-shader" type="x-shader/x-vertex">
uniform mat4 mvpMatrix;
attribute vec4 position;

void main () {
  gl_Position = mvpMatrix * position;
  gl_PointSize = 10.0;
}
</script>
<script id="fragment-shader" type="x-shader/x-fragment">
precision mediump float;

void main () {
  gl_FragColor = vec4(0.3, 0.3, 0.3, 1.0);
}
</script>
<script>
  const canvas = document.getElementById('canvas')
  const gl = canvas.getContext('webgl')
  const program = gl.createProgram()
  const vertexShader = gl.createShader(gl.VERTEX_SHADER)
  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)

  canvas.width = canvas.clientWidth
  canvas.height = canvas.clientHeight
  gl.viewport(0, 0, canvas.width, canvas.height)
  gl.shaderSource(vertexShader, document.getElementById('vertex-shader').text)
  gl.shaderSource(fragmentShader, document.getElementById('fragment-shader').text)
  gl.compileShader(vertexShader)
  gl.compileShader(fragmentShader)
  gl.attachShader(program, vertexShader)
  gl.attachShader(program, fragmentShader)
  gl.linkProgram(program)
  gl.useProgram(program)

  const positionLocation = 0
  const mvpLocation = gl.getUniformLocation(program, 'mvpMatrix')

  const buffer = gl.createBuffer()
  const vertices = new Float32Array([
    -1, -1, -1,
    -1, -1, 1,
    -1, 1, -1,
    -1, 1, 1,
    1, -1, -1,
    1, -1, 1,
    1, 1, -1,
    1, 1, 1
  ])
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW)
  gl.enableVertexAttribArray(positionLocation)
  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);

  const { vec3, mat4 } = glMatrix

  const eye = vec3.fromValues(3, 3, 3)
  const center = vec3.fromValues(0, 0, 0)
  const up = vec3.fromValues(0, 1, 0)
  const modelMatrix = mat4.create()
  const viewMatrix = mat4.create()
  const projectionMatrix = mat4.create()
  const mvpMatrix = mat4.create()

  const aspectRatio = canvas.width / canvas.height

  let angle = 0
  let deltaTime = 0
  let now = performance.now()
  let lastUpdate = now

  function render () {
    now = performance.now()
    deltaTime = now - lastUpdate
    lastUpdate = now

    gl.clear(gl.COLOR_BUFFER_BIT)

    angle += 0.2 * 2 * Math.PI * deltaTime / 1000

    mat4.fromYRotation(modelMatrix, angle)
    mat4.lookAt(viewMatrix, eye, center, up)
    mat4.perspective(projectionMatrix, Math.PI / 2, aspectRatio, 0.1, 10)
    mat4.multiply(mvpMatrix, projectionMatrix, viewMatrix)
    mat4.multiply(mvpMatrix, mvpMatrix, modelMatrix)

    gl.uniformMatrix4fv(mvpLocation, gl.FALSE, mvpMatrix)

    gl.drawArrays(gl.POINTS, 0, vertices.length / 3);

    window.requestAnimationFrame(render)
  }

  render()
</script>
